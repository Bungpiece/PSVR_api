/*
* Copyright (C) 2015 Sony Interactive Entertainment Inc.
*
* This program is free software; you can redistribute  it and/or modify it
* under  the terms of  the GNU General  Public License as published by the
* Free Software Foundation;  version 2 of the  License.
*
* THIS  SOFTWARE  IS PROVIDED   ``AS  IS AND   ANY  EXPRESS OR IMPLIED
* WARRANTIES,   INCLUDING, BUT NOT  LIMITED  TO, THE IMPLIED WARRANTIES OF
* MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN
* NO  EVENT  SHALL   THE AUTHOR  BE    LIABLE FOR ANY   DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
* NOT LIMITED   TO, PROCUREMENT OF  SUBSTITUTE GOODS  OR SERVICES; LOSS OF
* USE, DATA,  OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
* ANY THEORY OF LIABILITY, WHETHER IN  CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* You should have received a copy of the  GNU General Public License along
* with this program; if not, write  to the Free Software Foundation, Inc.,
* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/

#ifndef _HOST_DEVICE_H_
#define _HOST_DEVICE_H_

/* Don't change this order. */
/* Updater Gadget uses values of when it was built. */
typedef enum MBRIDGE_CONTORL_EVENT {
	HOST_IOCTL_CHECK_STATE = 100,
	HOST_IOCTL_MAP_USER_SPACE,
	HOST_IOCTL_UNMAP_USER_SPACE,

	// Host USB Connection
	HOST_IOCTL_GET_RUNNING_MODE = 104,
	HOST_IOCTL_SET_NORMAL_MODE,
	HOST_IOCTL_SET_DFU_MODE,
	HOST_IOCTL_GET_USB_CONNECTED_STATE,
	HOST_IOCTL_RESERVED1,
	HOST_IOCTL_RESERVED2,
	HOST_IOCTL_RESERVED3,
	HOST_IOCTL_RESERVED4,

	// Device Authentication
	HOST_IOCTL_GET_AUTH_STATE,
	HOST_IOCTL_GET_AUTH1_DATA,
	HOST_IOCTL_NOTIFY_GET_AUTH1_DATA_DONE,
	HOST_IOCTL_SET_AUTH2_DATA,
	HOST_IOCTL_NOTIFY_SET_AUTH2_DATA_DONE,
	HOST_IOCTL_AUTH_SET_ERROR,
	HOST_IOCTL_NOTIFY_AUTH_CANCEL_START,
	HOST_IOCTL_NOTIFY_AUTH_CANCEL_DONE,

	// PS4 command with Control Transfer
	HOST_IOCTL_GET_CTRL_COMMAND_REQ,
	HOST_IOCTL_SET_CTRL_COMMAND_RESULT,
	HOST_IOCTL_SET_CTRL_REPORT_DATA,
	HOST_IOCTL_GET_CTRL_REPORT_DATA,

	/* Add new IOCTL cmd here */

	// Host Authentication
	// "User" gets/sets data, "Host" sets/gets data.
	HOST_IOCTL_RESET_HAUTH = 800,
	HOST_IOCTL_GET_HAUTH_HOST_HELLO,
	HOST_IOCTL_GET_HAUTH_START,
	HOST_IOCTL_GET_HAUTH_MSG2,
	HOST_IOCTL_GET_HAUTH_DATA,
	HOST_IOCTL_SET_HAUTH_DEV_HELLO,
	HOST_IOCTL_SET_HAUTH_MSG1,
	HOST_IOCTL_SET_HAUTH_STATUS,

	// Debug
	HOST_IOCTL_GET_DFU_RECEIVED_SIZE_DEBUG = 907,
	HOST_IOCTL_GET_DFU_PUSHED_SIZE_DEBUG,
	HOST_IOCTL_GET_DFU_POPPED_SIZE_DEBUG,
	HOST_IOCTL_RESET_DFU_SIZE_DEBUG,
	HOST_IOCTL_DEBUG_GET_HAUTH_DEV_HELLO,
	HOST_IOCTL_DEBUG_GET_HAUTH_MSG1,
	HOST_IOCTL_DEBUG_GET_HAUTH_STATUS,

	/* Add new IOCTL cmd for debug here */
	HOST_IOCTL_ISO_DEBUG = 1000
} _MBRIDGE_CONTORL_EVENT;

typedef enum MBRIDGE_PS4CMD_R_ID {
	MBRIDGE_R_ID_GET_COMMAND_STATUS = 0x40,
} _MBRIDGE_PS4CMD_R_ID;

typedef enum MBRIDGE_CTRLCMD_STATUS {
	MBRIDGE_CTRL_STATUS_SUCCEED = 0x00,
	MBRIDGE_CTRL_STATUS_PROCESS,
	MBRIDGE_CTRL_STATUS_ERROR,
} _MBRIDGE_CTRLCMD_STATUS;

// for PS4
#define AUTH_STATUS_COMPLETE_AUTH2_DATA_CREATE	   0x00 // auth2 data generate is accomplished(enabled to response for get report)
#define AUTH_STATUS_WAIT_AUTH1_DATA_RECEIVE	   0x01 // waiting auth1 data received
#define AUTH_STATUS_CREATING_AUTH2_DATA		   0x10 // generating auth2 data
#define AUTH_STATUS_ERROR_INVALID_AUTH1_CRC	   0xF0 // auth1 CRC error
#define AUTH_STATUS_ERROR_CONTROL_ERROR		   0xF1 // error(something other reason)
#define AUTH_STATUS_ERROR_AUTH2_DATA_CREATE_FAILED 0xF2 // failed generating auth2 data

#define AUTH1_DATA_LENGTH 256
#define AUTH2_DATA_LENGTH 1040

#define REPORT_ID_SET_AUTH1_DATA  0xF0
#define REPORT_ID_GET_AUTH2_DATA  0xF1
#define REPORT_ID_GET_AUTH_STATUS 0xF2
#define REPORT_ID_GET_AUTH_CONFIG 0xF3

#define SET_AUTH_DATA_BLOCK_SIZE 56
#define GET_AUTH_DATA_BLOCK_SIZE 56
#define MAX_AUTH1_BLOCK_NUMBER	  4
#define MAX_AUTH2_BLOCK_NUMBER	 18
#define AUTHENTICATION_CONFIG_LENGTH 0x08

// Host Auth
#define REPORT_ID_HAUTH_SET_HOST_HELLO	    0xD0
#define REPORT_ID_HAUTH_SET_START	    0xD1
#define REPORT_ID_HAUTH_SET_MSG2	    0xD2
#define REPORT_ID_HAUTH_SET_DATA	    0xD3

#define REPORT_ID_HAUTH_GET_DEV_HELLO_0	    0xE0
#define REPORT_ID_HAUTH_GET_DEV_HELLO_1	    0xE1
#define REPORT_ID_HAUTH_GET_MSG1_0	    0xE2
#define REPORT_ID_HAUTH_GET_MSG1_1	    0xE3
#define REPORT_ID_HAUTH_GET_MSG1_2	    0xE4
#define REPORT_ID_HAUTH_GET_MSG1_3	    0xE5
#define REPORT_ID_HAUTH_GET_MSG1_4	    0xE6
#define REPORT_ID_HAUTH_GET_MSG1_5	    0xE7
#define REPORT_ID_HAUTH_GET_STATUS_0	    0xE8
#define REPORT_ID_HAUTH_GET_STATUS_1	    0xE9
// yaranai
#define REPORT_ID_HAUTH_GET_ACK		    0xEF

#define HAUTH_CRC_TARGET_LENGTH		    60
#define HAUTH_NAK			    0x00
#define HAUTH_ACK			    0xFF

#define HAUTH_FLAG_MASK_HELLO		    0x03
#define HAUTH_FLAG_MASK_START		    0x03
#define HAUTH_FLAG_MASK_MSG2		    0x03
#define HAUTH_FLAG_MASK_DATA		    0x03

#endif
